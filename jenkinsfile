pipeline {
    environment {
        ecr_url = credentials('ry_ecr_url')
        registryEndpoint = 'aline-user-ry'
        THE_BUTLER_SAYS_SO = credentials('ry-aws-credentials')
        AWS_PROFILE = "ry-ecs"
        ecs_a_key = credentials('ry_access_key')
        ecs_s_key = credentials('ry_secret_access_key')
        STACK = "RY-aline-finacial"
    }
    agent any
    stages {
        stage('Docker Hard Clean') {
            steps {
                sh 'docker context use default'
                sh 'sudo docker system prune -a --volumes -f'
            }
        }
        stage('ECS Context Creation') {
            steps {
                sh 'aws configure set aws_access_key_id ${ecs_a_key} --profile ${AWS_PROFILE}'
                sh 'aws configure set aws_secret_access_key_id ${ecs_s_key} --profile ${AWS_PROFILE}'
                sh 'aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ecr_url}${registryEndpoint}'
                sh 'docker context create ecs ${AWS_PROFILE} --profile ${AWS_PROFILE}'
                sh 'docker context use ${AWS_PROFILE}'
            }
        }
        stage('Docker Compose Up') {
            steps {
                sh '''aws secretsmanager get-secret-value --secret-id RY-aline-environment-variables | jq -r '.["SecretString"]' | jq '.' | jq -r 'keys[] as \$k | "export \\(\$k)=\\(.[\$k])"' > .env'''
                sh '. ./.env'
                script """
                    aws cloudformation describe-stacks --stack-name=${STACK} > stack.txt 2>&1

                    if [ $? -ne 0 ]; then
                        echo "Stack ${STACK} does not yet exist"
                    else
                        NUM="`grep -m 1 "StackStatus" stack.txt`"
                        CREATE="CREATE_IN_PROGRESS"
                        UPDATE="UPDATE_IN_PROGRESS"
                        ROLLBACK="UPDATE_ROLLBACK_IN_PROGRESS"
                        DELETE="DELETE_IN_PROGRESS"

                        if echo ${NUM} | grep ${CREATE};then
                            aws cloudformation wait stack-create-complete --stack-name=${STACK}
                        elif echo ${NUM} | grep ${UPDATE};then
                            aws cloudformation wait stack-update-complete --stack-name=${STACK}
                        elif echo ${NUM} | grep ${ROLLBACK};then
                            aws cloudformation wait stack-rollback-complete --stack-name=${STACK}
                        elif echo ${NUM} | grep ${DELETE};then
                            aws cloudformation wait stack-delete-complete --stack-name=${STACK}
                        else
                            echo "No stack activity in progress!  You are clear to compose up"
                        fi
                    fi
                    """
                sh 'docker compose -p ${ecs_stack_name} up -d'
            }
        }
    }
    
    post {
        always {
            sh 'docker context use default'
            sh 'docker context rm ${AWS_PROFILE}'
            sh 'sudo docker system prune --all -f'
            sh 'sudo docker logout'
            sh 'sudo rm ./.env'
            sh 'sudo rm -rf ~/.aws/'
            sh 'sudo rm -rf ~/jenkins/workspace/${JOB_NAME}/*'
            sh 'sudo rm -rf ~/jenkins/workspace/${JOB_NAME}/.git*'
        }
    } 
}